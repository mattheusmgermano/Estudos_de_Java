package application;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;

import entities.Product;

public class Program {
//	Set<T>
//	Representa um conjunto de elementos (similar ao da Álgebra)
//	Não admite repetições
//	Elementos não possuem posição
//	Acesso, inserção e remoção são rápidos
//	Oferece operações eficientes de conjunto: interseção, união, diferença
//	Principais implementações:
//		HashSet - mais rápido (operaçõesO(1) em tabelas hash) e não ordenado;
//		TreeSet - mais lento (operações O(log(n)) em árvore rubro-negra) pelo
//		compareTo do objeto (ou Comparator)
//		LinkedHashSet - velocidade intermediária e elementos na ordem em que são adicionados
//		
//	Alguns métodos importantes:
//	add(obj), remove(obj), contains(obj)
//		Baseado em equals e hashCode;
//		Se equals e hashCode não existir, é usada comparação de ponteiros.
//	clear()
//	size()
//	removeIf(predicate)
//	addAll(other) - união: adiciona no conjunto os elementos de outro conjunto, sem repetição
//	retainAll(other) - interseção: remove do conjunto os elementos não contidos em other
//	removeAll(other) - diferença: remove do conjunto os elementos contidos em other
	
	public static void main(String[] args) {
//		hashset();
//		treeset();
//		linkedset();
		
		var a = new TreeSet<>(Arrays.asList(0, 2, 3, 6, 9, 12));
		var b = new TreeSet<>(Arrays.asList(2, 4, 8, 10, 20, 100, 77777));
		
		//união		
		var c = new TreeSet<>(a);
		c.addAll(b);
		System.out.println(c);
		
		//interseção
		var d = new TreeSet<>(a);
		d.retainAll(b);
		System.out.println(d);
		
		//diferença
		var e = new TreeSet<>(a);
		e.removeAll(b);
		System.out.println(e);
		
//		Como as coleções Hash testam igualdade?
//		
//		Se HashCode e equals estiverem implementados:
//			Primeiro HashCode. Se der igual, usa equals para confirmar.
//			
//			String, Integer, Double, etc. já possuem equals e HashCode.
//			
//		Se HashCode e equals não estiverem implementados:
//			Compara a referência(ponteiros) dos objetos.
//		
		Set<Product> set = new HashSet<>();
		set.add(new Product("TV", 599.99));
		set.add(new Product("Notebook", 999.99));
		set.add(new Product("Tablet", 199.99));
		
		var prod = new Product("Notebook", 999.99);
		
		System.out.println(set.contains(prod));
		
	}

public static void treeset() {
	Set<String> set = new TreeSet<>();
	set.add("1) TV");
	set.add("2) Videogame");
	set.add("3) Rometitxe");
	
	System.out.println(set.contains("3) Rometitxe"));
	
	for(var obj : set) {
		System.out.println(obj);
	}
	System.out.println("[Fim do método TreeSet]");
}

public static void linkedset() {
	Set<String> set = new LinkedHashSet<>();
	set.add("1) TV");
	set.add("2) Videogame");
	set.add("3) Rometitxe");
	
	System.out.println(set.contains("3) Rometitxe"));
	
	set.removeIf(x -> x.length() >= 7);
	
	for(var obj : set) {
		System.out.println(obj);
	}
	System.out.println("[Fim do método LinkedHashSet]");
}

public static void hashset() {
	Set<String> set = new HashSet<>();
	set.add("1) TV");
	set.add("2) Videogame");
	set.add("3) Rometitxe");
	
	System.out.println(set.contains("3) Rometitxe"));
	
	for(var obj : set) {
		System.out.println(obj);
	}
	System.out.println("[Fim do método HashSet]");
}
	
}
