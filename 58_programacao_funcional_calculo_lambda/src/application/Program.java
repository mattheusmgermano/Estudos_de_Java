package application;

public class Program {
	public static void main(String[] args) {
//		Paradigmas de programação
//		Imperativo (C, Pascal, Fortran, Cobol)
//		Orientando a Objetos (C++, Object Pascal Java (<8), C# (<3))
//		Funcional (Haskell, Closure, Clean, Erlang)
//		Lógico (Prolog)
//		Multiparadigma (JavaScript, Java (+8), C#(+3), Ruby, Python, Go)
//		
//		É baseado no formalismo matemático Cálculo Lambda (Church 1930)
//												| Programação Imperativa | Programação Funcional |
//		Como se descreve algo a ser computado		comandos ("como")		expressões (o quê)
//		Func. possuem transp. referencial				fraco						forte
//		Objetos imutáveis								raro						comum
//		Funções são objs de 1ª ordem					não							sim
//		Expressividade/código conciso					baixa						alta
//		Tipagem dinâmica/inferência de tipos			raro						comum
//		
//		Transparência referencial:
//		Uma função possui transpaprência referencial se seu resultado for sempre o mesmo para os 
//		mesmos dados de entrada. Benefícios: simplicidade e previsibilidade
//		
//		Afinal, o que são expressões Lambda?
//				
//		Em programação funcional, expressão lambda corresponde a uma função anônima de primeira classe.
		
		
	}
}
